#!/usr/bin/env bash
# Use the native MacOS X/macOS mechanisms to perform forward and reverse DNS lookups
# Version: 201609013110 - Initial
# Version: 201808071148 - Updated to perform reverse lookups.
# Version: 202203040951 - A 'quiet' option when only the return code is needed.
# Version: 202303251129 - Slight reorganization and new silly commented code.

# Set the initial status to 1 (failure)
STAT=1
# Set verbose mode to YES by default
VERBOSE=YES
# Get the first argument passed to the script
QUERY="$1"

# Check if the first argument is '-q' for quiet mode
if [[ $1 = '-q' ]] ; then
	VERBOSE=NO
	QUERY="$2"
fi

# Check if the query is an IPv4 address
if [[ $QUERY =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] ; then
	OIFS="$IFS"
	IFS='.'
	# Set up each field of the IP address as an array entry
	ip=($QUERY)
	IFS="$OIFS"
	if [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]] ; then
		LOOKUPTYPE=IPv4
		LOOKUPRESULT="$(dscacheutil -q host -a ip_address "$QUERY")"
	# If the IPv4 address is invalid, print an error message and exit with the current status
	else echo "Invalid IPv4 Address" && exit "$STAT"
	fi
# Check if the query is an IPv6 address. Let's match any valid IPv6 address, including those containing leading zeroes, double colons, and link-local addresses with interface IDs
elif [[ $QUERY =~ ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$ ]] ; then
	LOOKUPTYPE=IPv6
	LOOKUPRESULT="$(dscacheutil -q host -a ip_address "$QUERY")"
# If the query matches neither an IPv4 nor IPv6 address treat it as a hostname with no regard for it being a syntactically valid. 
elif [ -z "$LOOKUPTYPE" ] ; then
	LOOKUPTYPE=HOSTNAME
	LOOKUPRESULT="$(dscacheutil -q host -a name "$QUERY")"
fi

if [ -z "$LOOKUPRESULT" ] ; then
	# If no lookup result was acquired we now quietly exit with the default failure return code.
	exit "$STAT"
else
	# By default, we're in verbose mode. We print the successfull result of the query, change the initial status to a success (0) and exit with that status.
	if [[ "$VERBOSE" = YES ]] ; then
		echo "$LOOKUPRESULT"
		STAT=0
		exit "$STAT"
	fi
	# In the event the script is being run in the non-verbose quiet mode, we change the initial status to a success (0) and exit with that status.
	if [[ "$VERBOSE" = NO ]] ; then
		STAT=0
		exit "$STAT"
	fi
fi
exit "$STAT"
